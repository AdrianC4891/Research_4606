function rxIn = PBNJ_symb_channel(txOut, EbNo, sps, modOrder, codeRate, ...
    JNR, p)
    
    rxIn = zeros(1,length(txOut));
    JNR_mag = db2mag(JNR);
    
    % generate WGN
    sig_power = mean(abs(txOut).^2);

    % WGN for jammed signal
    noise_power = sig_power/db2pow(EbNo);
    noise = wgn()

    EbNo_J = EbNo - 10*log(1 + JNR_mag/p);
    EsNodB_J = convertSNR(EEbNo_J,"ebno","esno", "BitsPerSymbol",log2(modOrder), "CodingRate",codeRate);
    
    EsNo_J = db2pow(EsNodB_J);
    No_J = sig_power/EsNo_J;
    noise_J = 

    % 1 symbol transmitted per hop
    for n=1:sps:length(txOut)
        isJammed = binornd(1,p); % bernoulli distribution
        if isJammed
            Eb_NJ = EbNo - 10*log(1 + JNR_mag/p); 
        else
            Eb_NJ = EbNo;
        end
        EsNodB = convertSNR(Eb_NJ,"ebno","esno", "BitsPerSymbol",log2(modOrder), "CodingRate",codeRate);
        rxIn(n:n+sps-1) = awgn(txOut(n:n+sps-1), EsNodB - 10*log10(sps), 'measured');
    end
    EsNodB = convertSNR(EbNo,"ebno","esno", "BitsPerSymbol",log2(modOrder), "CodingRate",codeRate);
    fprintf("EbNo = %f dB, EsNo = %f dB, JNR = %f, p = %f\n",EbNo, EsNodB, JNR, p);

end